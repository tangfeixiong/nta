# Inspired
# - https://www.snort.org/documents/snort-3-on-ubuntu-18-19
# - https://github.com/mosesrenegade/snort3-docker/blob/master/Dockerfile
# - https://github.com/jhunt/docker-snort3/blob/master/Dockerfile
# - https://github.com/kubernetes/ingress-nginx/blob/master/images/nginx/rootfs/Dockerfile
# - https://docs.docker.com/develop/develop-images/multistage-build/

FROM ubuntu:18.04

LABEL maintainer="tangfeixiong <tangfx128@gmail.com>" \
      project="snort3" \
      repository="https://github.com/snort3/snort3" \
	  tags="docker ubuntu snort"

RUN set -xe ; \
    # sed -i 's%http://archive.ubuntu.com/%http://cn.archive.ubuntu.com/%g;s%http://security.ubuntu.com/%http://cn.archive.ubuntu.com/%g' /etc/apt/sources.list; 
    sed -i 's%http://archive.ubuntu.com/%http://mirrors.aliyun.com/ubuntu/%g' /etc/apt/sources.list; \
    # sed -i 's%http://archive.ubuntu.com/%http://mirrors.tuna.tsinghua.edu.cn/ubuntu/%g' /etc/apt/sources.list;
	apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gnupg \
		git \
        # netcat
        # wget
		# net-tools
		\
        autotools-dev \
		build-essential \
		cmake \
		dh-autoreconf \
		\
		# libdnet-dev
		# libhwloc-dev
		# libluajit-5.1-dev
		libssl-dev \
		# libpcap-dev
		libpcre3-dev \
		pkg-config \
		zlib1g-dev \
		\		
		iptables-dev \
		libdumbnet-dev \
		libmnl-dev \
		libnetfilter-queue-dev \
		# libnet1-dev 
		# libsqlite3-dev 
		\
		bison \
		flex \
		# python-setuptools
		# python-pip
		# python-dev
		; \
	rm -rf /var/lib/apt/lists/* ; \
	echo "Dependency packages installed"
 
# Define working directory.
WORKDIR /tmp/build

ENV DAQ_VERSION=v3.0.0-beta2 \
    DNET_VERSION=libdnet-1.14 \
	HWLOC_VERSION=hwloc-2.3.0 \
	LUAJIT_VERSION=v2.1-20201027 \
	LUAJIT_LIB=/usr/local/lib \
    LUA_LIB_DIR=/usr/local/lib/lua \
    LUAJIT_INC=/usr/local/include/luajit-2.1 \
	OPENSSL_VERSION=OpenSSL_1_1_1h \
	PCAP_VERSION=libpcap-1.9.1 \
	PCRE_VERSION=pcre2-10.35 \
	ZLIB_VERSION=v1.2.11 \
    SNORT_VERSION=3.0.3-5 \
    SNORT_RULES_SNAPSHOT=3000 \
    MODSECURITY_LIB_VERSION=v3.0.4 \
    OWASP_MODSECURITY_CRS_VERSION=v3.3.0 \
	BUILD_PATH=/tmp/build

### zlib === http://www.zlib.net/ 
RUN set -xe; \
	\
	url="https://github.com/madler/zlib" && \
	tgt="${BUILD_PATH}/zlib" && \
	ver=${ZLIB_VERSION} && \
	git clone --branch ${ver} --depth 1 ${url} ${tgt} && \
	cd ${tgt} && \
	tag=$(git describe --tags --abbrev=0) && \
	\
	# ./configure && 
	# make && 
    # make install && 
	# make clean && 
	\
	echo -e "$(basename ${tgt}) build completed \n \
		git source: ${url} \n \
		git tag: ${tag} \n \
		version: ${ver}"
	
### openssl === https://www.openssl.org/source/
RUN set -xe; \
	\
	src="https://github.com/openssl/openssl" && \
	tgt="${BUILD_PATH}/openssl" && \
	ver=${OPENSSL_VERSION} && \
	git clone --branch ${ver} --depth 1 ${src} ${tgt} && \
	cd ${tgt} && \
	tag=$(git describe --tags --abbrev=0) && \
	\
	# ./Configure linux-x86_64 && 
	# make && 
    # make install && 
	# make clean && 
	\
	echo -e "$(basename ${tgt}) build completed \n \
		git source: ${src} \n \
		git tag: ${tag} \n \
		version: ${ver}"

### pcre === http://www.pcre.org/ 
RUN set -xe; \
	\
	cd ${BUILD_PATH} && \
	url="https://ftp.pcre.org/pub/pcre/${PCRE_VERSION}.tar.gz" && \
	src=$(basename "$url") && \
	curl -SL ${url} -o ${src} && \
	url="https://ftp.pcre.org/pub/pcre/${PCRE_VERSION}.tar.gz.sig" && \
	sig=$(basename "$url") && \
	curl -SL ${url} -o ${sig} && \
	curl -sSL https://ftp.pcre.org/pub/pcre/Public-Key | gpg --import - && \
	gpg --verify $sig $src && \
	tar xzf ${src} && \
	rm -f ${src} ${sig} && \
	cd ${PCRE_VERSION} && \
	tgt=${src%%-*} && \
	ver=${PCRE_VERSION} && \
	\
	./configure && \
	make && \
    make install && \
	make clean && \
	\
	echo -e "$(basename ${tgt}) build completed \n \
		version: ${ver}"

### luajit === http://luajit.org/download.html
RUN set -xe; \
	\
	src="https://github.com/openresty/luajit2" && \
	tgt="${BUILD_PATH}/luajit2" && \
	ver=${LUAJIT_VERSION} && \
	git clone --branch ${ver} --depth 1 ${src} ${tgt} && \
	cd ${tgt} && \
	tag=$(git describe --tags --abbrev=0) && \
	\
	make CCDEBUG=-g && \
    make install && \
	make clean && \
	ln -s /usr/local/bin/luajit /usr/local/bin/lua && \
	\
	echo -e "$(basename ${tgt}) build completed \n \
		git source: ${src} \n \
		git tag: ${tag} \n \
		version: ${ver}"

### libpcap == https://www.tcpdump.org/index.html#latest-releases
RUN set -xe; \
	\
	src="https://github.com/the-tcpdump-group/libpcap" && \
	tgt="${BUILD_PATH}/libpcap" && \
	ver=${PCAP_VERSION} && \
	git clone --branch ${ver} --depth 1 ${src} ${tgt} && \
	cd ${tgt} && \
	tag=$(git describe --tags --abbrev=0) && \
	\
	./configure && \
	make && \
    make install && \
	make clean && \
	# ldconfig && 
	\
	# ls -l /usr/local/lib/libpcap.* &&
	echo -e "$(basename ${tgt}) build completed \n \
		git source: ${src} \n \
		git tag: ${tag} \n \
		version: ${ver}"

### libdaq === https://github.com/snort3/libdaq
RUN set -xe; \
    \
	src="https://github.com/snort3/libdaq" && \
	tgt="${BUILD_PATH}/libdaq" && \
	ver=${DAQ_VERSION} && \
    git clone --branch $ver --depth 1 $src $tgt && \
    cd $tgt && \
	tag=$(git describe --tags --abbrev=0) && \
	\
    ./bootstrap && \
	./configure --with-libpcap-libraries=/usr/local/lib --with-libpcap-includes=/usr/local/include && \
	make && \
	make install && \
	make clean && \
	echo "$(basename $tgt) build completed \n \
		git source: ${src} \n \
    	git tag: ${tag} \n \
		version: ${ver}"
	
### libdnet === https://github.com/ofalk/libdnet
RUN set -xe; \
	\
	src="https://github.com/ofalk/libdnet" && \
	tgt="${BUILD_PATH}/libdnet" && \
	ver=${DNET_VERSION} && \
	git clone --branch $ver --depth 1 $src $tgt && \
	cd $tgt && \
	tag=$(git describe --tags --abbrev=0) && \
	\
	./configure && \
	make && \
	make install && \
	make clean && \
	\
	echo -e "$(basename $tgt) build completed \n \
		git source: ${src} \n \
    	git tag: ${tag} \n \
		version: ${ver}"
	
### hwloc === https://www.open-mpi.org/software/hwloc/v2.3/
RUN set -xe; \
	\
	src="https://github.com/open-mpi/hwloc" && \
	tgt="${BUILD_PATH}/hwloc" && \
	ver=${HWLOC_VERSION} && \
	git clone --branch ${ver} --depth 1 ${src} ${tgt} && \
	cd ${tgt} && \
	tag=$(git describe --tags --abbrev=0) && \
	\
	./autogen.sh && \
	./configure --prefix=/usr/local && \
	make && \
	make install && \
	make clean && \
	\
	echo -e "$(basename ${tgt}) build completed \n \
		git source: ${src} \n \
		git tag: ${tag} \n \
		version: ${ver}"

# This will break once Snort leaves beta because I've prepended the 
# downloaded file with the word -beta. 
RUN ldconfig 

ENV MY_PATH=/usr/local/snort
RUN set -e; \
 	# cp -f /tmp/libdnet/include/dnet/sctp.h /usr/local/include/dnet/ && 
    \
    url="https://github.com/snort3/snort3" && \
	dest=${url#http*://} && \
	dest=${dest%.git} && \
	tgt="${BUILD_PATH}/${dest}" && \
	ver=${SNORT_VERSION} && \
    git clone -b $ver --depth 1 $url $tgt && \
    cd $tgt && \
	tag=$(git describe --tags --abbrev=0) && \
	\
    ./configure_cmake.sh --prefix=${MY_PATH} --disable-docs && \
    cd build && \
    make -j $(nproc) && \
	make install && \
	make clean && \
	\
	echo -e "$(basename ${tgt}) build completed \n \
		git source: ${url} \n \
		git tag: ${tag} \n \
		version: ${ver}"

RUN ldconfig

# For this to work you MUST have downloaded the snort3 subscribers ruleset.
# This has to be located in the directory we are currently in.

# ADD snortrules-snapshot-${SNORT_RULES_SNAPSHOT}.tar.gz /opt
RUN set -xe; \
    # curl -SL https://www.snort.org/downloads/community/snort3-community-rules.tar.gz && 
    # tar -xzvf snort3-community-rules.tar.gz &&
	cd ${BUILD_PATH} && \
	url="https://www.snort.org/downloads/community/snort3-community-rules.tar.gz" && \
	src=$(basename "$url") && \
	curl -SL ${url} -o ${src} && \
    \
	# hash="b60ad5d3fd64c39a0ffd5ce7a289b2ae" &&
    # echo "$hash $src" | md5sum -c - &&
    curl -sSL https://www.snort.org/downloads/community/md5s | grep $src | md5sum -c - && \
    \
    dest="/etc/snort/snort3-community-rules" && \
    if [ ! -e "$dest" ]; then mkdir -p ${dest}; fi && \
    tar --directory=$dest --strip-components=1 -xzvf $src && \
    rm -f *.tar.gz

RUN mkdir -p /var/log/snort && \
    mkdir -p /usr/local/lib/snort_dynamicrules && \
    # mkdir -p /etc/snort && 
    mkdir -p /etc/snort/rules && \
    mkdir -p /etc/snort/preproc_rules && \
    \
	#??? cp -r ${MY_PATH}/etc/snort /etc/
    # mkdir -p /etc/snort/etc && 
    # cp -r /opt/rules /etc/snort &&
    # cp -r /opt/preproc_rules /etc/snort &&
    # cp -r /opt/etc /etc/snort && 
    \
    touch /etc/snort/rules/local.rules && \
    touch /etc/snort/rules/white_list.rules /etc/snort/rules/black_list.rules

# Clean up APT when done.
RUN set -e; \
    apt-get -y clean; \
	rm -rf /var/lib/apt/lists/* /tmp/build/* /var/tmp/* \
        /opt/* 
		# /opt/snort-${SNORT_VERSION}.tar.gz /opt/daq-${DAQ_VERSION}.tar.gz

ENV LUA_PATH=${MY_PATH}/include/snort/lua/\?.lua\;\;
ENV SNORT_LUA_PATH=${MY_PATH}/etc/snort

# Validate an installation
RUN ${MY_PATH}/bin/snort -c /etc/snort/snort.lua -R /etc/snort/snort3-community-rules/snort3-community.rules

# ADD entrypoint.sh /opt
RUN set -e; \
    echo -e '#!/bin/sh\n\nexec /usr/local/snort/bin/snort -c /etc/snort/etc/snort/snort.lua "$@"' >>/entrypoint.sh && \
	chmod a+x /entrypoint.sh

# Let's run snort!
# CMD ["-i", "eth0"]
# ENTRYPOINT ["/entrypoint.sh"]
CMD ["/usr/local/snort/bin/snort", "-d", "-i", "eth0", "-c", "/etc/snort/snort.lua", "--rule-path", "/etc/snort/snort3-community-rules/"]